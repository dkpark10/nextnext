import type { GetServerSideProps } from "next";
import Head from "next/head";
import React, { useRef } from "react";
import { useMutation, dehydrate, QueryClient, useQuery } from "@tanstack/react-query";
import { getTodo, updateTodo } from "@/services";
import { Todo } from "global-type";

interface NextNextProps {
  todoList: Todo[];
}

export default function NextNext({ todoList }: NextNextProps) {
  const inputRef = useRef<HTMLInputElement>(null);

  const { mutate } = useMutation((newTodo: Todo) => updateTodo(newTodo), {
    onError: (err, variables, context) => {
      console.log("error", err, variables, context);
    },
    onSuccess: () => {
      (inputRef.current as HTMLInputElement).value = " ";
    },
  });

  const onClick = () => {
    const id = todoList.length + 1;

    mutate({
      title: inputRef.current?.value as string,
      isCompleted: false,
      id,
    });
  };

  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
  };

  const deleteTodo = () => {};

  return (
    <>
      <Head>
        <title>nextnext</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <h1>next next</h1>
        <main>
          <div className="container">
            <form onSubmit={onSubmit}>
              <div className="input-container">
                <input type="text" ref={inputRef} />
                <button type="button" onClick={onClick}>
                  추가
                </button>
              </div>
            </form>
            {todoList.map((todo) => (
              <div className="todo-item" key={todo.id}>
                {todo.title}
                <div className="todo-controller">
                  <input type="checkbox" />
                  <button type="button" onClick={deleteTodo}>
                    삭제
                  </button>
                </div>
              </div>
            ))}
          </div>
        </main>
      </div>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async () => {
  const { todoList } = await getTodo();

  return {
    props: {
      todoList,
    },
  };
};
